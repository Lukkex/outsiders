# This schema defines authorization rules for users.
# Users are assigned to "admin" or "basic_users" groups in Cognito.
# The "admin" group has full control, while "basic_users" can only create and read their own data.

type Task @model @auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["basic_users"], operations: [create, read] }
  ]
) {
  id: ID!
  title: String!
  description: String
  status: String
}

# Private notes can only be accessed by their owner.
type PrivateNote @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
}

# User Profile model to store user-specific details
type UserProfile @model @auth(
  rules: [
    { allow: owner }, # Only the user who owns the profile can update it
    { allow: groups, groups: ["admin"], operations: [read, delete] } # Admins can read and delete
  ]
) {
  id: ID!
  username: String!
  email: String!
  role: String! # Example: "admin" or "basic_user"
}

# Form Submissions - Users can submit forms and admins can review them
type FormSubmission @model @auth(
  rules: [
    { allow: owner }, # The creator of the form can access it
    { allow: groups, groups: ["admin"], operations: [read, delete] } # Admins can review and delete
  ]
) {
  id: ID!
  userID: ID!
  prisonLocation: String!
  submissionDate: AWSDateTime!
  status: String! # Example: "pending", "approved", "rejected"
}

# Events Table - Users can create and view events
type Event @model @auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["basic_users"], operations: [read] } # Users can only view events
  ]
) {
  id: ID!
  eventName: String!
  eventDate: AWSDateTime!
  location: String!
  description: String
}

# Info Table - Stores general information for users
type Info @model @auth(
  rules: [
    { allow: groups, groups: ["admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["basic_users"], operations: [read] } # Users can only view info
  ]
) {
  id: ID!
  title: String!
  content: String!
}

# Bridge Table: Users linked to Forms
type UserFormBridge @model @auth(
  rules: [
    { allow: owner }, 
    { allow: groups, groups: ["admin"], operations: [read, delete] }
  ]
) {
  id: ID!
  userID: ID!
  formID: ID!
}

# Bridge Table: Users linked to Info
type UserInfoBridge @model @auth(
  rules: [
    { allow: owner }, 
    { allow: groups, groups: ["admin"], operations: [read, delete] }
  ]
) {
  id: ID!
  userID: ID!
  infoID: ID!
}

# Bridge Table: Users linked to Events
type UserEventBridge @model @auth(
  rules: [
    { allow: owner }, 
    { allow: groups, groups: ["admin"], operations: [read, delete] }
  ]
) {
  id: ID!
  userID: ID!
  eventID: ID!
}

# Users Table - Stores registered user data
type User @model @auth(
  rules: [
    { allow: owner }, 
    { allow: groups, groups: ["admin"], operations: [read, delete] }
  ]
) {
  id: ID!
  username: String!
  email: String!
  role: String!
}
