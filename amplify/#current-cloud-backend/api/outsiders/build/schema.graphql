type Task {
  id: ID!
  title: String!
  description: String
  status: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PrivateNote {
  id: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type UserProfile {
  id: ID!
  username: String!
  email: String!
  role: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type FormSubmission {
  id: ID!
  userID: ID!
  prisonLocation: String!
  submissionDate: AWSDateTime!
  status: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Event {
  id: ID!
  eventName: String!
  eventDate: AWSDateTime!
  location: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Info {
  id: ID!
  title: String!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserFormBridge {
  id: ID!
  userID: ID!
  formID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type UserInfoBridge {
  id: ID!
  userID: ID!
  infoID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type UserEventBridge {
  id: ID!
  userID: ID!
  eventID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type User {
  id: ID!
  username: String!
  email: String!
  role: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTaskConnection {
  items: [Task]!
  nextToken: String
}

input ModelTaskFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
}

type Query {
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  getPrivateNote(id: ID!): PrivateNote
  listPrivateNotes(filter: ModelPrivateNoteFilterInput, limit: Int, nextToken: String): ModelPrivateNoteConnection
  getUserProfile(id: ID!): UserProfile
  listUserProfiles(filter: ModelUserProfileFilterInput, limit: Int, nextToken: String): ModelUserProfileConnection
  getFormSubmission(id: ID!): FormSubmission
  listFormSubmissions(filter: ModelFormSubmissionFilterInput, limit: Int, nextToken: String): ModelFormSubmissionConnection
  getEvent(id: ID!): Event
  listEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String): ModelEventConnection
  getInfo(id: ID!): Info
  listInfos(filter: ModelInfoFilterInput, limit: Int, nextToken: String): ModelInfoConnection
  getUserFormBridge(id: ID!): UserFormBridge
  listUserFormBridges(filter: ModelUserFormBridgeFilterInput, limit: Int, nextToken: String): ModelUserFormBridgeConnection
  getUserInfoBridge(id: ID!): UserInfoBridge
  listUserInfoBridges(filter: ModelUserInfoBridgeFilterInput, limit: Int, nextToken: String): ModelUserInfoBridgeConnection
  getUserEventBridge(id: ID!): UserEventBridge
  listUserEventBridges(filter: ModelUserEventBridgeFilterInput, limit: Int, nextToken: String): ModelUserEventBridgeConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
}

input ModelTaskConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  status: ModelStringInput
  and: [ModelTaskConditionInput]
  or: [ModelTaskConditionInput]
  not: ModelTaskConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTaskInput {
  id: ID
  title: String!
  description: String
  status: String
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  status: String
}

input DeleteTaskInput {
  id: ID!
}

type Mutation {
  createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task
  updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task
  deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task
  createPrivateNote(input: CreatePrivateNoteInput!, condition: ModelPrivateNoteConditionInput): PrivateNote
  updatePrivateNote(input: UpdatePrivateNoteInput!, condition: ModelPrivateNoteConditionInput): PrivateNote
  deletePrivateNote(input: DeletePrivateNoteInput!, condition: ModelPrivateNoteConditionInput): PrivateNote
  createUserProfile(input: CreateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  updateUserProfile(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  deleteUserProfile(input: DeleteUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
  createFormSubmission(input: CreateFormSubmissionInput!, condition: ModelFormSubmissionConditionInput): FormSubmission
  updateFormSubmission(input: UpdateFormSubmissionInput!, condition: ModelFormSubmissionConditionInput): FormSubmission
  deleteFormSubmission(input: DeleteFormSubmissionInput!, condition: ModelFormSubmissionConditionInput): FormSubmission
  createEvent(input: CreateEventInput!, condition: ModelEventConditionInput): Event
  updateEvent(input: UpdateEventInput!, condition: ModelEventConditionInput): Event
  deleteEvent(input: DeleteEventInput!, condition: ModelEventConditionInput): Event
  createInfo(input: CreateInfoInput!, condition: ModelInfoConditionInput): Info
  updateInfo(input: UpdateInfoInput!, condition: ModelInfoConditionInput): Info
  deleteInfo(input: DeleteInfoInput!, condition: ModelInfoConditionInput): Info
  createUserFormBridge(input: CreateUserFormBridgeInput!, condition: ModelUserFormBridgeConditionInput): UserFormBridge
  updateUserFormBridge(input: UpdateUserFormBridgeInput!, condition: ModelUserFormBridgeConditionInput): UserFormBridge
  deleteUserFormBridge(input: DeleteUserFormBridgeInput!, condition: ModelUserFormBridgeConditionInput): UserFormBridge
  createUserInfoBridge(input: CreateUserInfoBridgeInput!, condition: ModelUserInfoBridgeConditionInput): UserInfoBridge
  updateUserInfoBridge(input: UpdateUserInfoBridgeInput!, condition: ModelUserInfoBridgeConditionInput): UserInfoBridge
  deleteUserInfoBridge(input: DeleteUserInfoBridgeInput!, condition: ModelUserInfoBridgeConditionInput): UserInfoBridge
  createUserEventBridge(input: CreateUserEventBridgeInput!, condition: ModelUserEventBridgeConditionInput): UserEventBridge
  updateUserEventBridge(input: UpdateUserEventBridgeInput!, condition: ModelUserEventBridgeConditionInput): UserEventBridge
  deleteUserEventBridge(input: DeleteUserEventBridgeInput!, condition: ModelUserEventBridgeConditionInput): UserEventBridge
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
}

input ModelSubscriptionTaskFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTaskFilterInput]
  or: [ModelSubscriptionTaskFilterInput]
}

type Subscription {
  onCreateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["createTask"])
  onUpdateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["updateTask"])
  onDeleteTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["deleteTask"])
  onCreatePrivateNote(filter: ModelSubscriptionPrivateNoteFilterInput, owner: String): PrivateNote @aws_subscribe(mutations: ["createPrivateNote"])
  onUpdatePrivateNote(filter: ModelSubscriptionPrivateNoteFilterInput, owner: String): PrivateNote @aws_subscribe(mutations: ["updatePrivateNote"])
  onDeletePrivateNote(filter: ModelSubscriptionPrivateNoteFilterInput, owner: String): PrivateNote @aws_subscribe(mutations: ["deletePrivateNote"])
  onCreateUserProfile(filter: ModelSubscriptionUserProfileFilterInput, owner: String): UserProfile @aws_subscribe(mutations: ["createUserProfile"])
  onUpdateUserProfile(filter: ModelSubscriptionUserProfileFilterInput, owner: String): UserProfile @aws_subscribe(mutations: ["updateUserProfile"])
  onDeleteUserProfile(filter: ModelSubscriptionUserProfileFilterInput, owner: String): UserProfile @aws_subscribe(mutations: ["deleteUserProfile"])
  onCreateFormSubmission(filter: ModelSubscriptionFormSubmissionFilterInput, owner: String): FormSubmission @aws_subscribe(mutations: ["createFormSubmission"])
  onUpdateFormSubmission(filter: ModelSubscriptionFormSubmissionFilterInput, owner: String): FormSubmission @aws_subscribe(mutations: ["updateFormSubmission"])
  onDeleteFormSubmission(filter: ModelSubscriptionFormSubmissionFilterInput, owner: String): FormSubmission @aws_subscribe(mutations: ["deleteFormSubmission"])
  onCreateEvent(filter: ModelSubscriptionEventFilterInput): Event @aws_subscribe(mutations: ["createEvent"])
  onUpdateEvent(filter: ModelSubscriptionEventFilterInput): Event @aws_subscribe(mutations: ["updateEvent"])
  onDeleteEvent(filter: ModelSubscriptionEventFilterInput): Event @aws_subscribe(mutations: ["deleteEvent"])
  onCreateInfo(filter: ModelSubscriptionInfoFilterInput): Info @aws_subscribe(mutations: ["createInfo"])
  onUpdateInfo(filter: ModelSubscriptionInfoFilterInput): Info @aws_subscribe(mutations: ["updateInfo"])
  onDeleteInfo(filter: ModelSubscriptionInfoFilterInput): Info @aws_subscribe(mutations: ["deleteInfo"])
  onCreateUserFormBridge(filter: ModelSubscriptionUserFormBridgeFilterInput, owner: String): UserFormBridge @aws_subscribe(mutations: ["createUserFormBridge"])
  onUpdateUserFormBridge(filter: ModelSubscriptionUserFormBridgeFilterInput, owner: String): UserFormBridge @aws_subscribe(mutations: ["updateUserFormBridge"])
  onDeleteUserFormBridge(filter: ModelSubscriptionUserFormBridgeFilterInput, owner: String): UserFormBridge @aws_subscribe(mutations: ["deleteUserFormBridge"])
  onCreateUserInfoBridge(filter: ModelSubscriptionUserInfoBridgeFilterInput, owner: String): UserInfoBridge @aws_subscribe(mutations: ["createUserInfoBridge"])
  onUpdateUserInfoBridge(filter: ModelSubscriptionUserInfoBridgeFilterInput, owner: String): UserInfoBridge @aws_subscribe(mutations: ["updateUserInfoBridge"])
  onDeleteUserInfoBridge(filter: ModelSubscriptionUserInfoBridgeFilterInput, owner: String): UserInfoBridge @aws_subscribe(mutations: ["deleteUserInfoBridge"])
  onCreateUserEventBridge(filter: ModelSubscriptionUserEventBridgeFilterInput, owner: String): UserEventBridge @aws_subscribe(mutations: ["createUserEventBridge"])
  onUpdateUserEventBridge(filter: ModelSubscriptionUserEventBridgeFilterInput, owner: String): UserEventBridge @aws_subscribe(mutations: ["updateUserEventBridge"])
  onDeleteUserEventBridge(filter: ModelSubscriptionUserEventBridgeFilterInput, owner: String): UserEventBridge @aws_subscribe(mutations: ["deleteUserEventBridge"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"])
}

type ModelPrivateNoteConnection {
  items: [PrivateNote]!
  nextToken: String
}

input ModelPrivateNoteFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPrivateNoteFilterInput]
  or: [ModelPrivateNoteFilterInput]
  not: ModelPrivateNoteFilterInput
  owner: ModelStringInput
}

input ModelPrivateNoteConditionInput {
  content: ModelStringInput
  and: [ModelPrivateNoteConditionInput]
  or: [ModelPrivateNoteConditionInput]
  not: ModelPrivateNoteConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreatePrivateNoteInput {
  id: ID
  content: String!
}

input UpdatePrivateNoteInput {
  id: ID!
  content: String
}

input DeletePrivateNoteInput {
  id: ID!
}

input ModelSubscriptionPrivateNoteFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPrivateNoteFilterInput]
  or: [ModelSubscriptionPrivateNoteFilterInput]
  owner: ModelStringInput
}

type ModelUserProfileConnection {
  items: [UserProfile]!
  nextToken: String
}

input ModelUserProfileFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  role: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserProfileFilterInput]
  or: [ModelUserProfileFilterInput]
  not: ModelUserProfileFilterInput
  owner: ModelStringInput
}

input ModelUserProfileConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  role: ModelStringInput
  and: [ModelUserProfileConditionInput]
  or: [ModelUserProfileConditionInput]
  not: ModelUserProfileConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserProfileInput {
  id: ID
  username: String!
  email: String!
  role: String!
}

input UpdateUserProfileInput {
  id: ID!
  username: String
  email: String
  role: String
}

input DeleteUserProfileInput {
  id: ID!
}

input ModelSubscriptionUserProfileFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  role: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserProfileFilterInput]
  or: [ModelSubscriptionUserProfileFilterInput]
  owner: ModelStringInput
}

type ModelFormSubmissionConnection {
  items: [FormSubmission]!
  nextToken: String
}

input ModelFormSubmissionFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  prisonLocation: ModelStringInput
  submissionDate: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelFormSubmissionFilterInput]
  or: [ModelFormSubmissionFilterInput]
  not: ModelFormSubmissionFilterInput
  owner: ModelStringInput
}

input ModelFormSubmissionConditionInput {
  userID: ModelIDInput
  prisonLocation: ModelStringInput
  submissionDate: ModelStringInput
  status: ModelStringInput
  and: [ModelFormSubmissionConditionInput]
  or: [ModelFormSubmissionConditionInput]
  not: ModelFormSubmissionConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateFormSubmissionInput {
  id: ID
  userID: ID!
  prisonLocation: String!
  submissionDate: AWSDateTime!
  status: String!
}

input UpdateFormSubmissionInput {
  id: ID!
  userID: ID
  prisonLocation: String
  submissionDate: AWSDateTime
  status: String
}

input DeleteFormSubmissionInput {
  id: ID!
}

input ModelSubscriptionFormSubmissionFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionIDInput
  prisonLocation: ModelSubscriptionStringInput
  submissionDate: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionFormSubmissionFilterInput]
  or: [ModelSubscriptionFormSubmissionFilterInput]
  owner: ModelStringInput
}

type ModelEventConnection {
  items: [Event]!
  nextToken: String
}

input ModelEventFilterInput {
  id: ModelIDInput
  eventName: ModelStringInput
  eventDate: ModelStringInput
  location: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelEventFilterInput]
  or: [ModelEventFilterInput]
  not: ModelEventFilterInput
}

input ModelEventConditionInput {
  eventName: ModelStringInput
  eventDate: ModelStringInput
  location: ModelStringInput
  description: ModelStringInput
  and: [ModelEventConditionInput]
  or: [ModelEventConditionInput]
  not: ModelEventConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateEventInput {
  id: ID
  eventName: String!
  eventDate: AWSDateTime!
  location: String!
  description: String
}

input UpdateEventInput {
  id: ID!
  eventName: String
  eventDate: AWSDateTime
  location: String
  description: String
}

input DeleteEventInput {
  id: ID!
}

input ModelSubscriptionEventFilterInput {
  id: ModelSubscriptionIDInput
  eventName: ModelSubscriptionStringInput
  eventDate: ModelSubscriptionStringInput
  location: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionEventFilterInput]
  or: [ModelSubscriptionEventFilterInput]
}

type ModelInfoConnection {
  items: [Info]!
  nextToken: String
}

input ModelInfoFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelInfoFilterInput]
  or: [ModelInfoFilterInput]
  not: ModelInfoFilterInput
}

input ModelInfoConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  and: [ModelInfoConditionInput]
  or: [ModelInfoConditionInput]
  not: ModelInfoConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateInfoInput {
  id: ID
  title: String!
  content: String!
}

input UpdateInfoInput {
  id: ID!
  title: String
  content: String
}

input DeleteInfoInput {
  id: ID!
}

input ModelSubscriptionInfoFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionInfoFilterInput]
  or: [ModelSubscriptionInfoFilterInput]
}

type ModelUserFormBridgeConnection {
  items: [UserFormBridge]!
  nextToken: String
}

input ModelUserFormBridgeFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  formID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFormBridgeFilterInput]
  or: [ModelUserFormBridgeFilterInput]
  not: ModelUserFormBridgeFilterInput
  owner: ModelStringInput
}

input ModelUserFormBridgeConditionInput {
  userID: ModelIDInput
  formID: ModelIDInput
  and: [ModelUserFormBridgeConditionInput]
  or: [ModelUserFormBridgeConditionInput]
  not: ModelUserFormBridgeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserFormBridgeInput {
  id: ID
  userID: ID!
  formID: ID!
}

input UpdateUserFormBridgeInput {
  id: ID!
  userID: ID
  formID: ID
}

input DeleteUserFormBridgeInput {
  id: ID!
}

input ModelSubscriptionUserFormBridgeFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionIDInput
  formID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFormBridgeFilterInput]
  or: [ModelSubscriptionUserFormBridgeFilterInput]
  owner: ModelStringInput
}

type ModelUserInfoBridgeConnection {
  items: [UserInfoBridge]!
  nextToken: String
}

input ModelUserInfoBridgeFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  infoID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserInfoBridgeFilterInput]
  or: [ModelUserInfoBridgeFilterInput]
  not: ModelUserInfoBridgeFilterInput
  owner: ModelStringInput
}

input ModelUserInfoBridgeConditionInput {
  userID: ModelIDInput
  infoID: ModelIDInput
  and: [ModelUserInfoBridgeConditionInput]
  or: [ModelUserInfoBridgeConditionInput]
  not: ModelUserInfoBridgeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserInfoBridgeInput {
  id: ID
  userID: ID!
  infoID: ID!
}

input UpdateUserInfoBridgeInput {
  id: ID!
  userID: ID
  infoID: ID
}

input DeleteUserInfoBridgeInput {
  id: ID!
}

input ModelSubscriptionUserInfoBridgeFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionIDInput
  infoID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserInfoBridgeFilterInput]
  or: [ModelSubscriptionUserInfoBridgeFilterInput]
  owner: ModelStringInput
}

type ModelUserEventBridgeConnection {
  items: [UserEventBridge]!
  nextToken: String
}

input ModelUserEventBridgeFilterInput {
  id: ModelIDInput
  userID: ModelIDInput
  eventID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserEventBridgeFilterInput]
  or: [ModelUserEventBridgeFilterInput]
  not: ModelUserEventBridgeFilterInput
  owner: ModelStringInput
}

input ModelUserEventBridgeConditionInput {
  userID: ModelIDInput
  eventID: ModelIDInput
  and: [ModelUserEventBridgeConditionInput]
  or: [ModelUserEventBridgeConditionInput]
  not: ModelUserEventBridgeConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserEventBridgeInput {
  id: ID
  userID: ID!
  eventID: ID!
}

input UpdateUserEventBridgeInput {
  id: ID!
  userID: ID
  eventID: ID
}

input DeleteUserEventBridgeInput {
  id: ID!
}

input ModelSubscriptionUserEventBridgeFilterInput {
  id: ModelSubscriptionIDInput
  userID: ModelSubscriptionIDInput
  eventID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserEventBridgeFilterInput]
  or: [ModelSubscriptionUserEventBridgeFilterInput]
  owner: ModelStringInput
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  role: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  owner: ModelStringInput
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  role: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateUserInput {
  id: ID
  username: String!
  email: String!
  role: String!
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  role: String
}

input DeleteUserInput {
  id: ID!
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  role: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  owner: ModelStringInput
}
